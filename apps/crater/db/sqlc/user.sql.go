// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package crater

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "Users" ("username", "email", "password_hash", "follower_count", "follow_count", "profile_picture", "bio") 
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING "user_id"
`

type CreateUserParams struct {
	Username       string
	Email          string
	PasswordHash   string
	FollowerCount  sql.NullInt32
	FollowCount    sql.NullInt32
	ProfilePicture sql.NullString
	Bio            sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.FollowerCount,
		arg.FollowCount,
		arg.ProfilePicture,
		arg.Bio,
	)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const deleteUserById = `-- name: DeleteUserById :one
DELETE FROM "Users" WHERE "user_id" = $1
RETURNING user_id, username, email, password_hash, follower_count, follow_count, profile_picture, bio, join_date, last_login
`

func (q *Queries) DeleteUserById(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FollowerCount,
		&i.FollowCount,
		&i.ProfilePicture,
		&i.Bio,
		&i.JoinDate,
		&i.LastLogin,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, username, email, password_hash, follower_count, follow_count, profile_picture, bio, join_date, last_login FROM "Users"
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.PasswordHash,
			&i.FollowerCount,
			&i.FollowCount,
			&i.ProfilePicture,
			&i.Bio,
			&i.JoinDate,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, username, email, password_hash, follower_count, follow_count, profile_picture, bio, join_date, last_login FROM "Users" WHERE "email" = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FollowerCount,
		&i.FollowCount,
		&i.ProfilePicture,
		&i.Bio,
		&i.JoinDate,
		&i.LastLogin,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, username, email, password_hash, follower_count, follow_count, profile_picture, bio, join_date, last_login FROM "Users" WHERE "user_id" = $1
`

func (q *Queries) GetUserById(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FollowerCount,
		&i.FollowCount,
		&i.ProfilePicture,
		&i.Bio,
		&i.JoinDate,
		&i.LastLogin,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT user_id, username, email, password_hash, follower_count, follow_count, profile_picture, bio, join_date, last_login FROM "Users" WHERE "username" = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FollowerCount,
		&i.FollowCount,
		&i.ProfilePicture,
		&i.Bio,
		&i.JoinDate,
		&i.LastLogin,
	)
	return i, err
}

const updateUserInfo = `-- name: UpdateUserInfo :one
UPDATE "Users"
SET "username" = $2, "email" = $3, "follower_count" = $4, "follow_count" = $5,
    "profile_picture" = $6, "bio" = $7
WHERE "user_id" = $1
RETURNING user_id, username, email, password_hash, follower_count, follow_count, profile_picture, bio, join_date, last_login
`

type UpdateUserInfoParams struct {
	UserID         int32
	Username       string
	Email          string
	FollowerCount  sql.NullInt32
	FollowCount    sql.NullInt32
	ProfilePicture sql.NullString
	Bio            sql.NullString
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserInfo,
		arg.UserID,
		arg.Username,
		arg.Email,
		arg.FollowerCount,
		arg.FollowCount,
		arg.ProfilePicture,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FollowerCount,
		&i.FollowCount,
		&i.ProfilePicture,
		&i.Bio,
		&i.JoinDate,
		&i.LastLogin,
	)
	return i, err
}
