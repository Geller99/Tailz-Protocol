// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: rewag.sql

package crater

import (
	"context"
	"database/sql"
)

const createReWag = `-- name: CreateReWag :one
INSERT INTO "ReWagz" ("user_id", "owner_wag_id")
VALUES ($1, $2)
RETURNING "rewagz_id"
`

type CreateReWagParams struct {
	UserID     sql.NullInt32
	OwnerWagID sql.NullInt32
}

func (q *Queries) CreateReWag(ctx context.Context, arg CreateReWagParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createReWag, arg.UserID, arg.OwnerWagID)
	var rewagz_id int32
	err := row.Scan(&rewagz_id)
	return rewagz_id, err
}

const deleteReWagById = `-- name: DeleteReWagById :one
DELETE FROM "ReWagz" WHERE "rewagz_id" = $1
RETURNING rewagz_id, user_id, owner_wag_id, timestamp
`

func (q *Queries) DeleteReWagById(ctx context.Context, rewagzID int32) (ReWagz, error) {
	row := q.db.QueryRowContext(ctx, deleteReWagById, rewagzID)
	var i ReWagz
	err := row.Scan(
		&i.RewagzID,
		&i.UserID,
		&i.OwnerWagID,
		&i.Timestamp,
	)
	return i, err
}

const getAllReWagz = `-- name: GetAllReWagz :many
SELECT rewagz_id, user_id, owner_wag_id, timestamp FROM "ReWagz"
`

func (q *Queries) GetAllReWagz(ctx context.Context) ([]ReWagz, error) {
	rows, err := q.db.QueryContext(ctx, getAllReWagz)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReWagz
	for rows.Next() {
		var i ReWagz
		if err := rows.Scan(
			&i.RewagzID,
			&i.UserID,
			&i.OwnerWagID,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReWagById = `-- name: GetReWagById :one
SELECT rewagz_id, user_id, owner_wag_id, timestamp FROM "ReWagz" WHERE "rewagz_id" = $1
`

func (q *Queries) GetReWagById(ctx context.Context, rewagzID int32) (ReWagz, error) {
	row := q.db.QueryRowContext(ctx, getReWagById, rewagzID)
	var i ReWagz
	err := row.Scan(
		&i.RewagzID,
		&i.UserID,
		&i.OwnerWagID,
		&i.Timestamp,
	)
	return i, err
}

const getReWagzByOwnerWagId = `-- name: GetReWagzByOwnerWagId :many
SELECT rewagz_id, user_id, owner_wag_id, timestamp FROM "ReWagz" WHERE "owner_wag_id" = $1
`

func (q *Queries) GetReWagzByOwnerWagId(ctx context.Context, ownerWagID sql.NullInt32) ([]ReWagz, error) {
	rows, err := q.db.QueryContext(ctx, getReWagzByOwnerWagId, ownerWagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReWagz
	for rows.Next() {
		var i ReWagz
		if err := rows.Scan(
			&i.RewagzID,
			&i.UserID,
			&i.OwnerWagID,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReWagzByUserId = `-- name: GetReWagzByUserId :many
SELECT rewagz_id, user_id, owner_wag_id, timestamp FROM "ReWagz" WHERE "user_id" = $1
`

func (q *Queries) GetReWagzByUserId(ctx context.Context, userID sql.NullInt32) ([]ReWagz, error) {
	rows, err := q.db.QueryContext(ctx, getReWagzByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReWagz
	for rows.Next() {
		var i ReWagz
		if err := rows.Scan(
			&i.RewagzID,
			&i.UserID,
			&i.OwnerWagID,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
