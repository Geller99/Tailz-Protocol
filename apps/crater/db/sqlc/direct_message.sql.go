// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: direct_message.sql

package crater

import (
	"context"
	"database/sql"
)

const createDirectMessage = `-- name: CreateDirectMessage :one
INSERT INTO "DirectMessages" ("sender_id", "recipient_id", "content") 
VALUES ($1, $2, $3)
RETURNING "message_id"
`

type CreateDirectMessageParams struct {
	SenderID    sql.NullString
	RecipientID sql.NullString
	Content     sql.NullString
}

func (q *Queries) CreateDirectMessage(ctx context.Context, arg CreateDirectMessageParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createDirectMessage, arg.SenderID, arg.RecipientID, arg.Content)
	var message_id int32
	err := row.Scan(&message_id)
	return message_id, err
}

const deleteDirectMessageById = `-- name: DeleteDirectMessageById :one
DELETE FROM "DirectMessages" WHERE "message_id" = $1
RETURNING message_id, sender_id, recipient_id, content, timestamp, is_read
`

func (q *Queries) DeleteDirectMessageById(ctx context.Context, messageID int32) (DirectMessage, error) {
	row := q.db.QueryRowContext(ctx, deleteDirectMessageById, messageID)
	var i DirectMessage
	err := row.Scan(
		&i.MessageID,
		&i.SenderID,
		&i.RecipientID,
		&i.Content,
		&i.Timestamp,
		&i.IsRead,
	)
	return i, err
}

const getAllDirectMessages = `-- name: GetAllDirectMessages :many
SELECT message_id, sender_id, recipient_id, content, timestamp, is_read FROM "DirectMessages"
`

func (q *Queries) GetAllDirectMessages(ctx context.Context) ([]DirectMessage, error) {
	rows, err := q.db.QueryContext(ctx, getAllDirectMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DirectMessage
	for rows.Next() {
		var i DirectMessage
		if err := rows.Scan(
			&i.MessageID,
			&i.SenderID,
			&i.RecipientID,
			&i.Content,
			&i.Timestamp,
			&i.IsRead,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDirectMessageById = `-- name: GetDirectMessageById :one
SELECT message_id, sender_id, recipient_id, content, timestamp, is_read FROM "DirectMessages" WHERE "message_id" = $1
`

func (q *Queries) GetDirectMessageById(ctx context.Context, messageID int32) (DirectMessage, error) {
	row := q.db.QueryRowContext(ctx, getDirectMessageById, messageID)
	var i DirectMessage
	err := row.Scan(
		&i.MessageID,
		&i.SenderID,
		&i.RecipientID,
		&i.Content,
		&i.Timestamp,
		&i.IsRead,
	)
	return i, err
}

const getDirectMessagesByRecipientId = `-- name: GetDirectMessagesByRecipientId :many
SELECT message_id, sender_id, recipient_id, content, timestamp, is_read FROM "DirectMessages" WHERE "recipient_id" = $1
`

func (q *Queries) GetDirectMessagesByRecipientId(ctx context.Context, recipientID sql.NullString) ([]DirectMessage, error) {
	rows, err := q.db.QueryContext(ctx, getDirectMessagesByRecipientId, recipientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DirectMessage
	for rows.Next() {
		var i DirectMessage
		if err := rows.Scan(
			&i.MessageID,
			&i.SenderID,
			&i.RecipientID,
			&i.Content,
			&i.Timestamp,
			&i.IsRead,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDirectMessagesBySenderId = `-- name: GetDirectMessagesBySenderId :many
SELECT message_id, sender_id, recipient_id, content, timestamp, is_read FROM "DirectMessages" WHERE "sender_id" = $1
`

func (q *Queries) GetDirectMessagesBySenderId(ctx context.Context, senderID sql.NullString) ([]DirectMessage, error) {
	rows, err := q.db.QueryContext(ctx, getDirectMessagesBySenderId, senderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DirectMessage
	for rows.Next() {
		var i DirectMessage
		if err := rows.Scan(
			&i.MessageID,
			&i.SenderID,
			&i.RecipientID,
			&i.Content,
			&i.Timestamp,
			&i.IsRead,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDirectMessageInfo = `-- name: UpdateDirectMessageInfo :one
UPDATE "DirectMessages"
SET "content" = $2, "is_read" = $3
WHERE "message_id" = $1
RETURNING message_id, sender_id, recipient_id, content, timestamp, is_read
`

type UpdateDirectMessageInfoParams struct {
	MessageID int32
	Content   sql.NullString
	IsRead    sql.NullBool
}

func (q *Queries) UpdateDirectMessageInfo(ctx context.Context, arg UpdateDirectMessageInfoParams) (DirectMessage, error) {
	row := q.db.QueryRowContext(ctx, updateDirectMessageInfo, arg.MessageID, arg.Content, arg.IsRead)
	var i DirectMessage
	err := row.Scan(
		&i.MessageID,
		&i.SenderID,
		&i.RecipientID,
		&i.Content,
		&i.Timestamp,
		&i.IsRead,
	)
	return i, err
}
