// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: wag.sql

package crater

import (
	"context"
	"database/sql"
)

const deleteWagById = `-- name: DeleteWagById :one
DELETE FROM "Wagz" WHERE "wag_id" = $1
RETURNING wag_id, user_id, rewagz_count, likes, content, timestamp
`

func (q *Queries) DeleteWagById(ctx context.Context, wagID int32) (Wagz, error) {
	row := q.db.QueryRowContext(ctx, deleteWagById, wagID)
	var i Wagz
	err := row.Scan(
		&i.WagID,
		&i.UserID,
		&i.RewagzCount,
		&i.Likes,
		&i.Content,
		&i.Timestamp,
	)
	return i, err
}

const getAllWags = `-- name: GetAllWags :many
SELECT wag_id, user_id, rewagz_count, likes, content, timestamp FROM "Wagz"
`

func (q *Queries) GetAllWags(ctx context.Context) ([]Wagz, error) {
	rows, err := q.db.QueryContext(ctx, getAllWags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wagz
	for rows.Next() {
		var i Wagz
		if err := rows.Scan(
			&i.WagID,
			&i.UserID,
			&i.RewagzCount,
			&i.Likes,
			&i.Content,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWagById = `-- name: GetWagById :one
SELECT wag_id, user_id, rewagz_count, likes, content, timestamp FROM "Wagz" WHERE "wag_id" = $1
`

func (q *Queries) GetWagById(ctx context.Context, wagID int32) (Wagz, error) {
	row := q.db.QueryRowContext(ctx, getWagById, wagID)
	var i Wagz
	err := row.Scan(
		&i.WagID,
		&i.UserID,
		&i.RewagzCount,
		&i.Likes,
		&i.Content,
		&i.Timestamp,
	)
	return i, err
}

const getWagzByUserId = `-- name: GetWagzByUserId :many
SELECT wag_id, user_id, rewagz_count, likes, content, timestamp FROM "Wagz" WHERE "user_id" = $1
`

func (q *Queries) GetWagzByUserId(ctx context.Context, userID sql.NullInt32) ([]Wagz, error) {
	rows, err := q.db.QueryContext(ctx, getWagzByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wagz
	for rows.Next() {
		var i Wagz
		if err := rows.Scan(
			&i.WagID,
			&i.UserID,
			&i.RewagzCount,
			&i.Likes,
			&i.Content,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWagInfo = `-- name: UpdateWagInfo :one
UPDATE "Wagz"
SET "content" = $2
WHERE "wag_id" = $1
RETURNING wag_id, user_id, rewagz_count, likes, content, timestamp
`

type UpdateWagInfoParams struct {
	WagID   int32
	Content string
}

func (q *Queries) UpdateWagInfo(ctx context.Context, arg UpdateWagInfoParams) (Wagz, error) {
	row := q.db.QueryRowContext(ctx, updateWagInfo, arg.WagID, arg.Content)
	var i Wagz
	err := row.Scan(
		&i.WagID,
		&i.UserID,
		&i.RewagzCount,
		&i.Likes,
		&i.Content,
		&i.Timestamp,
	)
	return i, err
}
